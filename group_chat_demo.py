"""
Demo script ƒë·ªÉ test c√°c c·∫£i thi·ªán giao di·ªán Group Chat
"""
import sys
import asyncio
from PyQt6 import QtWidgets
from qasync import QEventLoop, QApplication

# Import c√°c component c·∫ßn thi·∫øt
from client.Group_chat.embedded_group_chat_widget import EmbeddedGroupChatWidget
from client.Login.login_signIn import LoginWindow

class GroupChatDemo(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Group Chat UI Demo")
        self.setGeometry(100, 100, 800, 600)
        
        # Mock data cho demo
        self.mock_client = MockClient()
        self.mock_user_id = "1"
        self.mock_username = "test_user"
        self.mock_group_data = {
            "group_id": "1",
            "group_name": "Nh√≥m Demo",
            "created_by": "1"
        }
        
        self.setup_ui()
        
    def setup_ui(self):
        """Thi·∫øt l·∫≠p UI demo"""
        central_widget = QtWidgets.QWidget()
        self.setCentralWidget(central_widget)
        
        layout = QtWidgets.QVBoxLayout(central_widget)
        
        # Ti√™u ƒë·ªÅ demo
        title = QtWidgets.QLabel("üé® Group Chat UI Demo - C√°c c·∫£i thi·ªán m·ªõi:")
        title.setStyleSheet("""
            QLabel {
                font-size: 18px;
                font-weight: bold;
                color: #0084FF;
                padding: 10px;
                background-color: #f7f8fa;
                border-radius: 8px;
                margin: 10px;
            }
        """)
        layout.addWidget(title)
        
        # Danh s√°ch t√≠nh nƒÉng
        features = QtWidgets.QLabel("""
        ‚ú® C√°c c·∫£i thi·ªán m·ªõi:
        ‚Ä¢ Emoji picker v·ªõi popup menu ƒëa d·∫°ng
        ‚Ä¢ Typing indicator khi g√µ tin nh·∫Øn
        ‚Ä¢ Dark mode toggle v·ªõi animation m∆∞·ª£t m√†
        ‚Ä¢ Responsive design cho c√°c m√†n h√¨nh kh√°c nhau
        ‚Ä¢ Message reactions v·ªõi animation
        ‚Ä¢ C·∫£i thi·ªán animations v√† hover effects
        ‚Ä¢ Theme support to√†n di·ªán (light/dark)
        """)
        features.setStyleSheet("""
            QLabel {
                font-size: 12px;
                color: #666666;
                padding: 10px;
                background-color: #ffffff;
                border: 1px solid #e4e6ea;
                border-radius: 8px;
                margin: 10px;
            }
        """)
        features.setWordWrap(True)
        layout.addWidget(features)
        
        # Group chat widget
        self.group_chat = EmbeddedGroupChatWidget(
            self.mock_client,
            self.mock_user_id,
            self.mock_username,
            self.mock_group_data
        )
        layout.addWidget(self.group_chat)
        
        # Control panel
        control_panel = self.create_control_panel()
        layout.addWidget(control_panel)
        
    def create_control_panel(self):
        """T·∫°o panel ƒëi·ªÅu khi·ªÉn ƒë·ªÉ test c√°c t√≠nh nƒÉng"""
        panel = QtWidgets.QWidget()
        panel.setStyleSheet("""
            QWidget {
                background-color: #f7f8fa;
                border-top: 1px solid #e4e6ea;
                padding: 10px;
            }
        """)
        
        layout = QtWidgets.QHBoxLayout(panel)
        
        # Button ƒë·ªÉ th√™m tin nh·∫Øn demo
        add_message_btn = QtWidgets.QPushButton("üìù Th√™m tin nh·∫Øn demo")
        add_message_btn.clicked.connect(self.add_demo_message)
        layout.addWidget(add_message_btn)
        
        # Button ƒë·ªÉ test typing indicator
        typing_btn = QtWidgets.QPushButton("‚å®Ô∏è Test typing indicator")
        typing_btn.clicked.connect(self.test_typing_indicator)
        layout.addWidget(typing_btn)
        
        # Button ƒë·ªÉ test emoji picker
        emoji_btn = QtWidgets.QPushButton("üòä Test emoji picker")
        emoji_btn.clicked.connect(self.test_emoji_picker)
        layout.addWidget(emoji_btn)
        
        # Button ƒë·ªÉ toggle theme
        theme_btn = QtWidgets.QPushButton("üåì Toggle theme")
        theme_btn.clicked.connect(self.toggle_demo_theme)
        layout.addWidget(theme_btn)
        
        layout.addStretch()
        return panel
    
    def add_demo_message(self):
        """Th√™m tin nh·∫Øn demo"""
        import random
        messages = [
            "Xin ch√†o m·ªçi ng∆∞·ªùi! üëã",
            "H√¥m nay th·ªùi ti·∫øt ƒë·∫πp qu√°! ‚òÄÔ∏è",
            "Ai mu·ªën ƒëi ch∆°i kh√¥ng? üéÆ",
            "Project n√†y hay qu√°! üëç",
            "C·∫£m ∆°n m·ªçi ng∆∞·ªùi ƒë√£ h·ªó tr·ª£! ‚ù§Ô∏è"
        ]
        
        message = random.choice(messages)
        is_sent = random.choice([True, False])
        sender_name = "user_demo" if not is_sent else None
        
        self.group_chat.add_message(
            message, 
            is_sent, 
            sender_name=sender_name,
            show_sender_name=not is_sent
        )
    
    def test_typing_indicator(self):
        """Test typing indicator"""
        self.group_chat.show_typing_indicator("Alice")
    
    def test_emoji_picker(self):
        """Test emoji picker"""
        self.group_chat._show_emoji_picker()
    
    def toggle_demo_theme(self):
        """Toggle theme cho demo"""
        self.group_chat.toggle_theme()

class MockClient:
    """Mock client ƒë·ªÉ demo"""
    def __init__(self):
        self.connection = None
    
    async def send_json(self, data):
        """Mock send_json method"""
        print(f"[MOCK] Sending: {data}")
        return {"success": True}

def main():
    """Main function ƒë·ªÉ ch·∫°y demo"""
    app = QApplication(sys.argv)
    
    # Setup qasync event loop
    loop = QEventLoop(app)
    asyncio.set_event_loop(loop)
    
    # T·∫°o v√† hi·ªÉn th·ªã demo window
    demo = GroupChatDemo()
    demo.show()
    
    # Ch·∫°y event loop
    with loop:
        loop.run_forever()

if __name__ == "__main__":
    main()
